service: mypay-users

plugins:
  - serverless-offline
  - serverless-bundle
  - serverless-plugin-custom-roles

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  environment:
    COGNITO_USER_POOL_ID: ${file(../../resources/stack-outputs/cognito-${self:custom.stage}.yml):CognitoUserPoolId}
  
custom:
  defaultStage: ${file(../../../serverless.common.yml):custom.defaultStage}
  resourcesStages: ${file(../../../serverless.common.yml):custom.resourcesStages}
  resourceStage: ${file(../../../serverless.common.yml):custom.resourcesStage}
  stage: ${file(../../../serverless.common.yml):custom.stage}
  baseApiPath: ${file(../../../serverless.common.yml):custom.baseApiPath}

  usersEntityPath: ${self:custom.baseApiPath}/users


  bundle:
    sourcemaps: false
    externals:
      - mypay-helpers
      - users-helpers
    linting: false #Ignore for compilation
    ignorePackages:
      - pg-hstore
      # only on aws
      - ../../../layers/helper_lib/src/response.helper
      - ../../../layers/users_lib/src/user
      - ../../../layers/helper_lib/src/mysql-db
  
functions:
  ServiceUsersGet:
    handler: functions/get-users-handler.getUsers
    iamRoleStatements:
      - Effect: Allow
        Action:
          - rds-data:ExecuteStatement
          - rds-data:BatchExecuteStatement
          - rds-data:BeginTransaction
          - rds-data:CommitTransaction
          - rds-data:RollbackTransaction
        Resource: "*"
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource:
          'Fn::ImportValue': ${self:custom.stage}-SecretManagerArn
    events:
    - http:
        path: ${self:custom.usersEntityPath}
        method: get
        cors: true
    layers:
      - ${file(../../layers/layers-outputs.yml):HelperlibLambdaLayerQualifiedArn}
      - ${file(../../layers/layers-outputs.yml):UserslibLambdaLayerQualifiedArn}

  ServiceUsersGetByPropertyValue:
    handler: functions/get-user-handler.getUser
    iamRoleStatements:
      - Effect: Allow
        Action:
          - rds-data:ExecuteStatement
          - rds-data:BatchExecuteStatement
          - rds-data:BeginTransaction
          - rds-data:CommitTransaction
          - rds-data:RollbackTransaction
        Resource: "*"
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource:
          'Fn::ImportValue': ${self:custom.stage}-SecretManagerArn
    events:
    - http:
        path: ${self:custom.usersEntityPath}/{property}/{value}
        method: get
        cors: true
        request:
          parameters:
            paths:
              property: true
              value: true
    layers:
      - ${file(../../layers/layers-outputs.yml):HelperlibLambdaLayerQualifiedArn}
      - ${file(../../layers/layers-outputs.yml):UserslibLambdaLayerQualifiedArn}

  ServiceUsersCreate:
    handler: functions/create-user-handler.createUser
    iamRoleStatements:
      - Effect: Allow
        Action:
          - rds-data:ExecuteStatement
          - rds-data:BatchExecuteStatement
          - rds-data:BeginTransaction
          - rds-data:CommitTransaction
          - rds-data:RollbackTransaction
        Resource: "*"
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource:
          'Fn::ImportValue': ${self:custom.stage}-SecretManagerArn
      - Effect: Allow
        Action:
          - cognito-idp:AdminCreateUser
        Resource:
          'Fn::ImportValue': ${self:custom.stage}-CognitoUserPoolArn
    events:
    - http:
        path: ${self:custom.usersEntityPath}
        method: post
    layers:
      - ${file(../../layers/layers-outputs.yml):HelperlibLambdaLayerQualifiedArn}
      - ${file(../../layers/layers-outputs.yml):UserslibLambdaLayerQualifiedArn}

  ServiceUsersDelete:
    handler: functions/delete-user-handler.remove
    iamRoleStatements:
      - Effect: Allow
        Action:
          - rds-data:ExecuteStatement
          - rds-data:BatchExecuteStatement
          - rds-data:BeginTransaction
          - rds-data:CommitTransaction
          - rds-data:RollbackTransaction
        Resource: "*"
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource:
          'Fn::ImportValue': ${self:custom.stage}-SecretManagerArn
      - Effect: Allow
        Action:
          - cognito-idp:AdminDeleteUser
        Resource:
          'Fn::ImportValue': ${self:custom.stage}-CognitoUserPoolArn
    events:
    - http:
        path: ${self:custom.usersEntityPath}/delete/{email}
        method: delete
        cors: true
        request:
          parameters:
            paths:
              email: true
    layers:
      - ${file(../../layers/layers-outputs.yml):HelperlibLambdaLayerQualifiedArn}
      - ${file(../../layers/layers-outputs.yml):UserslibLambdaLayerQualifiedArn}
                
  ServiceUsersToggleDisableEnable:
    handler: functions/toggle-disable-enable-user-handler.toggleDisableEnable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - rds-data:ExecuteStatement
          - rds-data:BatchExecuteStatement
          - rds-data:BeginTransaction
          - rds-data:CommitTransaction
          - rds-data:RollbackTransaction
        Resource: "*"
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource:
          'Fn::ImportValue': ${self:custom.stage}-SecretManagerArn
      - Effect: Allow
        Action:
          - cognito-idp:AdminEnableUser
          - cognito-idp:AdminDisableUser
        Resource:
          'Fn::ImportValue': ${self:custom.stage}-CognitoUserPoolArn
    events:
    - http:
        path: ${self:custom.usersEntityPath}/toggleDisableEnable/{email}
        method: patch
        cors: true
        request:
          parameters:
            paths:
              email: true
    layers:
      - ${file(../../layers/layers-outputs.yml):HelperlibLambdaLayerQualifiedArn}
      - ${file(../../layers/layers-outputs.yml):UserslibLambdaLayerQualifiedArn}